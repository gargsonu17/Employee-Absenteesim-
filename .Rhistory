install.packages(c("dplyr", "plyr", "ggplot2", "reshape", "data.table", "dmm"))
#set current working directory
setwd("F:/Edwisor/Data Science/Project Work/Employee-Absenteeism-master")
getwd()
library(readxl)
library(mice)
library(dplyr)
library(corrplot)
library(ggplot2)
library(tidyverse)
library(randomForest)
library(caret)
library(data.table)
library(Boruta)
library(rpart)
## Read the data
absent_data <- read_excel("Absenteeism_at_work_Project.xls", sheet = 1)
View(absent_data)
source('F:/Edwisor/Data Science/Project Work/Employee-Absenteeism-master/Employee_Absenteeism_Project.R')
source('F:/Edwisor/Data Science/Project Work/Employee-Absenteeism-master/Employee_Absenteeism_Project.R')
source('F:/Edwisor/Data Science/Project Work/Employee-Absenteeism-master/Employee_Absenteeism_Project.R')
source('F:/Edwisor/Data Science/Project Work/Employee-Absenteeism-master/Employee_Absenteeism_Project.R')
## Changing the continous variables to categorical variables for the ease of performance
absent_data$Reason.for.absence = as.factor(absent_data$Reason.for.absence)
View(absent_data)
## Read the data
absent_data <- read_excel("Absenteeism_at_work_Project.xls", sheet = 1)
absent_data = transform(absent_data, Month.of.absence =
ifelse(Month.of.absence == 0, NA, Month.of.absence ))
absent_data = transform(absent_data, Month_of_absence =
ifelse(Month_of_absence == 0, NA, Month.of.absence ))
## Read the data
absent_data <- read_excel("Absenteeism_at_work_Project.xls", sheet = 1)
#set current working directory
setwd("F:/Edwisor/Data Science/Project Work/Employee-Absenteeism-master")
#Check workin directory path
getwd()
library(readxl)
library(dplyr)
library(corrplot)
## Read the data
absent_data <- read_excel("Absenteeism_at_work_Project.xlsx", sheet = 1)
## Read the data
absent_data <- read_excel("Absenteeism_at_work_Project.xls", sheet = 1)
## Changing the continous variables to categorical variables
##for getting ease performance of data
absent_data$Reason.for.absence = as.factor(absent_data$Reason.for.absence)
absent_data$Month.of.absence = as.factor(absent_data$Month.of.absence)
absent_data$Day.of.the.week = as.factor(absent_data$Day.of.the.week)
absent_data$Seasons = as.factor(absent_data$Seasons)
absent_data$Service.time = as.factor(absent_data$Service.time)
absent_data$Hit.target = as.factor(absent_data$Hit.target)
absent_data$Disciplinary.failure = as.factor(absent_data$Disciplinary.failure)
absent_data$Education = as.factor(absent_data$Education)
absent_data$Son = as.factor(absent_data$Son)
absent_data$Social.drinker = as.factor(absent_data$Social.drinker)
absent_data$Social.smoker = as.factor(absent_data$Social.smoker)
absent_data$Pet = as.factor(absent_data$Pet)
absent_data$Work.load.Average.day  = as.numeric(absent_data$Work.load.Average.day )
## Outlier analysis
outlierKD <- function (dt, var) {
var_name <- eval(substitute(var), eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean (var_name, na.rm = T)
par (mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot (var_name, main="With outliers")
hist (var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(dt))
} else{
cat("Nothing changed", "n")
return(invisible(var_name))
}
}
var_name <- eval(substitute(var), eval(dt))
#outlierKD(absent_data,Son) # no outliers
#outlierKD(absent_data,Pet) # no outliers
outlierKD(absent_data,Weight) # no outliers
outlierKD(absent_data,Transportation.expense) #no outliers
outlierKD(absent_data,Distance.from.Residence.to.Work) #no outliers
outlierKD(absent_data,Service.time) #no outliers
outlierKD(absent_data,Age) #no outliers
outlierKD(absent_data,Hit.target) # 1 found and replaced with NA
outlierKD(absent_data,Son) # no outliers
#outlierKD(absent_data,Pet) # no outliers
outlierKD(absent_data,Weight) # no outliers
outlierKD(absent_data,Weight) # no outliers
outlierKD(absent_data,Body.mass.index) #no outliers
outlierKD(absent_data,Pet) # no outliers
outlierKD(absent_data,Body.mass.index) #no outliers
outlierKD(absent_data,Height) # no outliers
ggplot(data = missing_val[1:3,], aes(x=reorder(Columns, -Missing_percentage),y = Missing_percentage))+
geom_bar(stat = "identity",fill = "grey")+xlab("Parameter")+
ggtitle("Missing data percentage (Train)") + theme_bw()
library(ggplot2)
univariate_analysis(absent_data,Transportation.expense,"Transportation.expense")
univariate_catogrical(absent_data,Seasons,"Seasons")
View(absent_data)
#Random Forest
library(randomForest)
install.packages("randomForest")
RF_model = randomForest(Absenteeism.time.in.hours ~ ., train, importance = TRUE, ntree = 1000)
library(inTrees)
treeList <- RF2List(RF_model)
